import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:random_string/random_string.dart';
import 'package:vibrate/vibrate.dart';

class ChatMessageField extends StatefulWidget {
  final Function(String) sendText;
  final Function(File) sendVoice;

  ChatMessageField({Key key, this.sendText, this.sendVoice}) : super(key: key);

  @override
  _ChatMessageFieldState createState() => _ChatMessageFieldState();
}

class _ChatMessageFieldState extends State<ChatMessageField> {
  final TextEditingController _controller = TextEditingController();

  FlutterSoundRecorder _myRecorder = FlutterSoundRecorder();

  bool _recording = false;

  set recording(bool val) {
    setState(() {
      _recording = val;
    });
  }

  bool _mRecorderIsInited = false;

  set mRecorderIsInited(bool val) {
    setState(() {
      _mRecorderIsInited = val;
    });
  }

  Directory _docDir;

  void getDirectory() async {
    Directory dir = await getApplicationDocumentsDirectory();
    setState(() {
      _docDir = dir;
    });
  }

  @override
  void initState() {
    super.initState();
    getDirectory();
    _myRecorder.openAudioSession().then((value) {
      mRecorderIsInited = true;
    });
    getPermissions();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.all(15.0),
      height: 70,
      child: Center(
        child: Row(
          children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  color: AppColor.appBg,
                  borderRadius: BorderRadius.circular(35.0),
                  boxShadow: [
                    BoxShadow(
                        offset: Offset(0, 3),
                        blurRadius: 5,
                        color: AppColor.appSilver)
                  ],
                ),
                child: Row(
                  children: [
                    SizedBox(width: 15),
                    Expanded(
                      child: TextField(
                        controller: _controller,
                        decoration: InputDecoration(
                            hintText: "Type Something...",
                            hintStyle: TextStyle(color: AppColor.primary),
                            border: InputBorder.none),
                        onSubmitted: (v) {
                          if (v.isNotEmpty) widget.sendText.call(v);
                          _controller.clear();
                        },
                      ),
                    ),
                    IconButton(
                      icon: Icon(Icons.send_rounded, color: AppColor.primary),
                      onPressed: () {
                        if (_controller.text.isNotEmpty)
                          widget.sendText.call(_controller.text);
                        _controller.clear();
                        FocusScope.of(context).unfocus();
                      },
                    ),
                    // IconButton(
                    //   icon: Icon(Icons.attach_file, color: AppColor.primary),
                    //   onPressed: () {},
                    // ),
                  ],
                ),
              ),
            ),
            SizedBox(width: 15),
            Container(
              // padding: EdgeInsets.all(_recording?18.0:15.0),
              width: _recording ? 60 : 50,
              height: _recording ? 60 : 50,
              decoration: BoxDecoration(
                color: _recording
                    ? AppColor.primary.withOpacity(0.7)
                    : AppColor.primary,
                shape: BoxShape.circle,
              ),
              child: GestureDetector(
                child: Icon(
                  Icons.keyboard_voice,
                  color: Colors.white,
                ),
                onLongPress: () => record(),
                onLongPressEnd: (_) => stopRecorder(),
              ),
            )
          ],
        ),
      ),
    );
  }

  Future<bool> getPermissions() async {
    Map<Permission, PermissionStatus> statuses = await [
      Permission.storage,
      Permission.microphone,
    ].request();
    if (statuses[Permission.storage] != PermissionStatus.granted) {
      showToast(msg: "Storage permission not granted");
      return false;
    }
    if (statuses[Permission.microphone] != PermissionStatus.granted) {
      showToast(msg: "Microphone permission not granted");
      return false;
    }
    return true;
  }

  Future<void> record() async {
    if (!_mRecorderIsInited) {
      showToast(msg: "Recorder is taking more time...");
      return;
    }

    bool permissionGranted = await getPermissions();
    if (!permissionGranted) return;
    recording = true;
    await _myRecorder.startRecorder(
      toFile: randomAlpha(20)+".aacADTS",
      codec: Codec.aacADTS,
    );
  }

  Future<void> stopRecorder() async {
    String recPath = await _myRecorder.stopRecorder();
    File rec = File(recPath);
    recording = false;
    widget.sendVoice(rec);
  }

  void vibrate() async {
    bool canVibrate = await Vibrate.canVibrate;
    canVibrate ? Vibrate.feedback(FeedbackType.medium) : null;
  }

  @override
  void dispose() {
    // Be careful : you must `close` the audio session when you have finished with it.
    _myRecorder.closeAudioSession();
    _myRecorder = null;
    super.dispose();
  }
}
